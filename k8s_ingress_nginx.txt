// hjkim, 2022.10.21

Kubernetes Ingress-Nginx

 - https://github.com/kubernetes/ingress-nginx
 - https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/index.md
 - https://github.com/kubernetes/ingress-nginx/tree/main/deploy/static/provider/cloud


$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.4.0/deploy/static/provider/cloud/deploy.yaml

$ kubectl get deployment --namespace=ingress-nginx
$ kubectl get pods --namespace=ingress-nginx

$ kubectl expose deploy ingress-nginx-controller --name ingress-nginx-controller-svc --port 80 --type=NodePort -n ingress-nginx
$ kubectl get service -o wide

// create pod with ingress (pathname, ...)
...
{
// e.g.,
...
body = client.V1Ingress(
    api_version = "networking.k8s.io/v1",
    kind = "Ingress",
    metadata = client.V1ObjectMeta(
        name = ingress_name,
        annotations = {
            "kubernetes.io/ingress.class": "nginx",
            "nginx.ingress.kubernetes.io/rewrite-target": "/",
            #"nginx.ingress.kubernetes.io/ssl-redirect": "false",
        }
    ),
    spec = client.V1IngressSpec(
        # annotations or ingress_class_name
        #ingress_class_name = "nginx",

        rules = [
            client.V1IngressRule(
                # http://example.com/test_path1 -> (ingress) -> (service: test_path_svc:80) -> (pod:80)
                #

                # connect to IP if not specified 'host'
                #host = host, # "example.com"

                http = client.V1HTTPIngressRuleValue(
                    paths = [
                        client.V1HTTPIngressPath(
                            path = "/test_path1"

                            path_type = "Exact",
                            #path_type = "Prefix",

                            backend = client.V1IngressBackend(
                                service = client.V1IngressServiceBackend(
                                    port = client.V1ServiceBackendPort(
                                        number = 80
                                    ),
                                    name = "test_path_svc"
                                )
                            )
                        ),
                    ]
                )
            )
        ]
    )
)
}

(error: failed calling webhook "validate.nginx.ingress.kubernetes.io" ...)
$ kubectl delete validatingwebhookconfiguration ingress-nginx-admission


$ kubectl get ingress
$ kubectl describe ingress [ingress name]

http://127.0.0.1:[ingress nodeport]/pathname

// reboot nodes if doesn't work



---------------------------------------------------------

ingress-nginx: 504 timed-out error
.spec.externalTrafficPolicy: "Local" -> "Cluster"

//source-ip/source-ip-for-services-with-type-nodeport


https://pwittrock.github.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip

service.spec.externalTrafficPolicy

This feature can be activated by setting externalTrafficPolicy to “Local” in the Service Configuration file.
{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "example-service",
      },
      "spec": {
        "ports": [{
          "port": 8765,
          "targetPort": 9376
        }],
        "selector": {
          "app": "example"
        },
        "type": "LoadBalancer",
        "externalTrafficPolicy": "Local"
      }
    }

